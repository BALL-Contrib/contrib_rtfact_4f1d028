#-*- Python -*-

# SconsBuilder Project File
#
# This file will be executed after the initial build environment is created
# but before it is finalized.
#
# - Available variables for import -
#
# init_env - Initial build environment
#
# - Available environment variables -
#
#  init_env['BUILD_DIR'] - building directory
#  init_env['OBJ_DIR']   - building subdirectory for object files, etc.
#
# You should at least declare following init_env variables:
#
# INCLUDE_DIR      - Include directory
# SRC_DIR          - Main source directory 
# LIB_DIR          - Destination directory for libraries
# BIN_DIR          - Destination directory for executables
# CONFIG_HEADER    - Used for autogenerated configuration header
#                    use None or ConfigHeader()
# PROJECT_PREFIX   - Used for auto-configuration
# SYSTEM_PREFIX    - Used for auto-configuration
# COMPILER_PREFIX  - Used for auto-configuration
# AUTOCONF_PREFIX  - Used for auto-configuration

import sys
import os
import os.path
import datetime
from string import split
from builder.btools import *

Import('init_env')

AddCustomOptions(
    BoolOption('makebindings', 'create bindings with SWIG', 1),
    BoolOption('python', 'compile python bindings', 0),
    ('INIMAGE_DIST_DIR', 'Path to inImage distribution'),
    BoolOption('enable_umbra',
               'enable building of Umbra rendering module', 1)
    )
SetDefaultCompilerName('INTEL')

BUILD_DIR = init_env['BUILD_DIR']

INCLUDE_DIR = '#../../include'
SRC_DIR = '#src'
LIB_DIR = BUILD_DIR + os.sep + 'lib'
BIN_DIR = BUILD_DIR + os.sep + 'bin'

CONFIG_HEADER = ConfigHeader()

# define symbol prefixes

PROJECT_PREFIX = 'RTFACT_'
SYSTEM_PREFIX = ''
COMPILER_PREFIX = ''
AUTOCONF_PREFIX = 'RTFACT_'

init_env.Replace(CXXFILESUFFIX='.cpp',
                 INCLUDE_DIR=INCLUDE_DIR,
                 SRC_DIR=SRC_DIR,
                 LIB_DIR=LIB_DIR,
                 BIN_DIR=BIN_DIR,
                 CONFIG_HEADER=CONFIG_HEADER,
                 PROJECT_PREFIX=PROJECT_PREFIX,
                 SYSTEM_PREFIX=SYSTEM_PREFIX,
                 COMPILER_PREFIX=COMPILER_PREFIX,
                 AUTOCONF_PREFIX=AUTOCONF_PREFIX,
                 CPPPATH=[SRC_DIR, INCLUDE_DIR],
                 LIBPATH=[LIB_DIR])

# Setup configuration, conf is created by env.Configure()

def customizeConfiguration(conf):
    # in conf.env is the environment that can be changed
    isWin32 = conf.env['PLATFORM'] == 'win32'

    if not conf.CheckTypeSizes():
        print >>sys.stderr, 'Error: Could not determine type sizes'
        Exit(1)

    if not conf.CheckEndianness():
        print >>sys.stderr, 'Error: Could not determine platform endianness'
        Exit(1)
        
    if conf.CheckSSE3(write_config_h=False):
        conf.env.Replace(HAVE_SSE3=1)
    else:
        conf.env.Replace(HAVE_SSE3=0)
        
    if conf.CheckPNG():
        conf.env.Replace(HAVE_PNG=1)
    else:
        conf.env.Replace(HAVE_PNG=0)
        print >>sys.stderr, 'Warning: Could not found png library.'

    if conf.CheckJPEG():
        conf.env.Replace(HAVE_JPEG=1)
    else:
        conf.env.Replace(HAVE_JPEG=0)
        print >>sys.stderr, 'Warning: Could not found jpeg library.'

    if not conf.CheckSDL(write_config_h=False):
        print >>sys.stderr, 'Error: Could not find SDL library'
        Exit(1)
        
    # check boost headers
    if not conf.CheckCXXHeader('boost/bind.hpp') or \
           not conf.CheckCXXHeader('boost/function.hpp'):
        print >>sys.stderr, 'Error: Could not find Boost library'
        Exit(1)
        
#    if conf.CheckURayUtils():
#        conf.env.Replace(HAVE_URAY_UTILS=1)
#    else:
#        print >>sys.stderr, 'Error: Could not found URayUtils header files'
#        Exit(1)

RegisterConfigurationCustomizer(customizeConfiguration)

# Customize final environment

def finalizeEnvironment(env):
    # Evaluate building hierarchy
    Export('env')

    if env['compiler'] == 'MSVC':
        #env.Replace(CCFLAGS = split('/O2 /Ob2 /Oi /Ot /Oy /GL /GF /FD /EHsc /MD /GS- /arch:SSE2 /fp:fast /Zc:wchar_t- /nologo /c /TP /wd4652'))
        #env.Replace(CCFLAGS = split('/Od /Ob2 /Oi /Ot /Oy /GL /GF /FD /EHsc /MD /GS- /arch:SSE2 /fp:fast /Zc:wchar_t- /nologo /c /TP /wd4652'))
        #env.Replace(LINKFLAGS = split('/nologo /MACHINE:X86 /SUBSYSTEM:CONSOLE /NODEFAULTLIB:"libc.lib" /NODEFAULTLIB:"libcmt.lib" /NODEFAULTLIB:"msvcrt.lib" /NODEFAULTLIB:"libcd.lib" /NODEFAULTLIB:"libcmtd.lib"'))
        #env.Replace(LINKFLAGS = split('/INCREMENTAL:NO /NOLOGO /NODEFAULTLIB:"libc.lib" /NODEFAULTLIB:"libcmt.lib" /NODEFAULTLIB:"libcd.lib" /NODEFAULTLIB:"libcmtd.lib" /NODEFAULTLIB:"msvcrtd.lib" /SUBSYSTEM:CONSOLE /OPT:REF /OPT:ICF /LTCG /DYNAMICBASE:NO /MACHINE:X86 /PROFILE /ERRORREPORT:PROMPT'))
        env.Append(CPPDEFINES = split('NDEBUG WIN32 _CONSOLE _UNICODE UNICODE'))
    elif env['compiler'] == 'GCC':
        env.Append(CCFLAGS = '-fpermissive')
    elif env['compiler'] == 'INTEL':
        if(env['PLATFORM'] != 'win32'):
            env.Append(CCFLAGS = split('-fp-speculation=fast -fomit-frame-pointer -fno-stack-security-check -Wno-unknown-pragmas -wd1188,1476,1505,1572,858'))

    # src

    BuildDir(env['OBJ_DIR'], env['SRC_DIR'], duplicate=0)
    SConscript(env['OBJ_DIR'] + os.sep + 'SConscript')

    # examples

    # Alternate method to setup build directory :
    # SConscript('src' + os.sep + 'SConscript',
    #            build_dir=env['BUILD_DIR'],
    #            src_dir=env['SRC_DIR'],
    #            duplicate=0)

    # default targets

    Default(env['BUILD_DIR'])
    
    # release and full-release target

    curdate = datetime.date.today().isoformat()

    MAJOR_VERSION = 0
    MINOR_VERSION = 4
    PATCH_VERSION = 0

    VERSION = "%i-%i-%i" % (MAJOR_VERSION, MINOR_VERSION, PATCH_VERSION)
    TARGET_ARCH_SUFFIX = env.get('TARGET_ARCH_SUFFIX', 'IA32')

    RELEASE_NAME = 'URay-Release-Version-%s-%s-%s' % \
                   (VERSION, TARGET_ARCH_SUFFIX, curdate)

    FULL_RELEASE_NAME = 'URay-Full-Release-Version-%s-%s-%s' % \
                        (VERSION, TARGET_ARCH_SUFFIX, curdate)

    release = env.CreateDist('#/'+RELEASE_NAME,
                             Split('bin lib bin-openrt lib-openrt'),
                             'RTfactDemo',
                             excludeExts=['.cvsignore', '.sconsign'],
                             excludeDirs=['CVS','.svn','.sconf_temp'])
    env.Alias('release', release)

    full_release = env.CreateDist('#/'+FULL_RELEASE_NAME,
                                  Split('bin lib bin-openrt lib-openrt include include-openrt engines'),
                                  'RTfactDemo',
                                  excludeExts=['.cvsignore', '.sconsign'],
                                  excludeDirs=['CVS','.svn','.sconf_temp'])
    env.Alias('full-release', full_release)
    
RegisterEnvironmentFinalizer(finalizeEnvironment)
