#
# Find the JITRT includes and library
##
# sets JITRT_INCLUDE_DIR
#      JITRT_LIBRARY
#      JITRT_DEBUG_LIBRARY
#      JITRT_FOUND
#      JITRT_LIBRARIES
#      JITRT_LIBRARY_DIR

FIND_PATH(JITRT_INCLUDE_DIR jitRT/llvmWrapper.h
  ${JITRT_ROOT}/include
  /usr/local/include
  /usr/include
)

IF(WIN32)
  FIND_LIBRARY(JITRT_LIBRARY
               NAMES jitRT
               PATHS ${JITRT_INCLUDE_DIR}/../lib
               ${JITRT_INCLUDE_DIR}/../lib/${ARCH})
  FIND_LIBRARY(JITRT_LIBRARY_DEBUG
               NAMES jitRT_debug jitRTd jitRT
               PATHS ${JITRT_INCLUDE_DIR}/../lib
               ${JITRT_INCLUDE_DIR}/../lib/${ARCH})
ELSE(WIN32)
  FIND_LIBRARY(JITRT_LIBRARY jitRT
               ${JITRT_INCLUDE_DIR}/../lib
               /usr/local/lib
               /usr/lib)
  FIND_LIBRARY(JITRT_LIBRARY_DEBUG jitRT_debug jitRT
               ${JITRT_INCLUDE_DIR}/../lib
               /usr/local/lib
               /usr/lib)
ENDIF(WIN32)


SET(JITRT_FOUND "NO")
IF(JITRT_INCLUDE_DIR AND JITRT_LIBRARY)
  GET_FILENAME_COMPONENT( JITRT_LIBRARY_DIR ${JITRT_LIBRARY} PATH )
  GET_FILENAME_COMPONENT( JITRT_LIBRARY ${JITRT_LIBRARY} NAME )
  IF(WIN32)
    SET(JITRT_LIBRARIES optimized ${JITRT_LIBRARY} ${CMAKE_DL_LIBS})
    IF(JITRT_LIBRARY_DEBUG)
      GET_FILENAME_COMPONENT( JITRT_LIBRARY_DEBUG ${JITRT_LIBRARY_DEBUG} NAME )
      SET(JITRT_LIBRARIES ${JITRT_LIBRARIES} debug ${JITRT_LIBRARY_DEBUG})
    ENDIF(JITRT_LIBRARY_DEBUG)
  ELSE(WIN32)
    SET(JITRT_LIBRARIES general ${JITRT_LIBRARY} ${CMAKE_DL_LIBS})
  ENDIF(WIN32)
  SET(JITRT_FOUND "YES")
ENDIF(JITRT_INCLUDE_DIR AND JITRT_LIBRARY)

SET(JITRT_LIBRARIES "${JITRT_LIBRARIES}" CACHE STRING "List of JITRT libraries")

