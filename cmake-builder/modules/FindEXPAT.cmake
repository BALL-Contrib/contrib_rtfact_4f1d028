# - Find expat
# Find the native EXPAT headers and libraries.
#
# Variables controlling this moduel's behaviour:
#  EXPAT_USE_STATIC_LIBS   - set this to ON to link to static expat libs
#
# Variables set by this module:
#  EXPAT_INCLUDE_DIRS - where to find expat.h, etc.
#  EXPAT_LIBRARIES    - List of libraries when using expat.
#  EXPAT_LIBRARY_DIRS - List of directories containing expat libs
#  EXPAT_FOUND        - True if expat found.

# Look for the header file.
FIND_PATH(EXPAT_INCLUDE_DIR NAMES expat.h HINTS ENV EXPAT_ROOT PATH_SUFFIXES Source/lib)

# Look for the library.
IF(EXPAT_USE_STATIC_LIBS)
  FIND_LIBRARY(EXPAT_DEBUG_LIBRARY NAMES expat libexpatMDd HINTS ENV EXPAT_ROOT PATH_SUFFIXES Bin)
  FIND_LIBRARY(EXPAT_OPTIMIZED_LIBRARY NAMES expat libexpatMD HINTS ENV EXPAT_ROOT PATH_SUFFIXES Bin)
ELSE(EXPAT_USE_STATIC_LIBS)
  FIND_LIBRARY(EXPAT_OPTIMIZED_LIBRARY NAMES expat libexpat HINTS ENV EXPAT_ROOT PATH_SUFFIXES Bin)
  SET(EXPAT_DEBUG_LIBRARY ${EXPAT_OPTIMIZED_LIBRARY})
ENDIF(EXPAT_USE_STATIC_LIBS)

# handle the QUIETLY and REQUIRED arguments and set EXPAT_FOUND to TRUE if
# all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(EXPAT DEFAULT_MSG EXPAT_OPTIMIZED_LIBRARY EXPAT_DEBUG_LIBRARY EXPAT_INCLUDE_DIR)

# Copy the results to the output variables.
IF(EXPAT_FOUND)
  SET(EXPAT_LIBRARIES)
  SET(EXPAT_LIBRARY_DIRS)
  FOREACH(ONE_LIBPATH ${EXPAT_DEBUG_LIBRARY})
    STRING(REGEX REPLACE "/[^/]*$" "" ONE_DIR ${ONE_LIBPATH})
    SET(EXPAT_LIBRARY_DIRS ${EXPAT_LIBRARY_DIRS} "${ONE_DIR}")
    STRING(REGEX REPLACE ".*/" "" ONE_LIB ${ONE_LIBPATH})
    SET(EXPAT_LIBRARIES ${EXPAT_LIBRARIES} debug ${ONE_LIB})
  ENDFOREACH(ONE_LIBPATH)
  FOREACH(ONE_LIBPATH ${EXPAT_OPTIMIZED_LIBRARY})
    STRING(REGEX REPLACE "/[^/]*$" "" ONE_DIR ${ONE_LIBPATH})
    SET(EXPAT_LIBRARY_DIRS ${EXPAT_LIBRARY_DIRS} "${ONE_DIR}")
    STRING(REGEX REPLACE ".*/" "" ONE_LIB ${ONE_LIBPATH})
    SET(EXPAT_LIBRARIES ${EXPAT_LIBRARIES} optimized ${ONE_LIB})
  ENDFOREACH(ONE_LIBPATH)
  SET(EXPAT_INCLUDE_DIRS ${EXPAT_INCLUDE_DIR})
ELSE(EXPAT_FOUND)
  SET(EXPAT_LIBRARIES)
  SET(EXPAT_LIBRARY_DIRS)
  SET(EXPAT_INCLUDE_DIRS)
ENDIF(EXPAT_FOUND)

MARK_AS_ADVANCED(EXPAT_INCLUDE_DIR EXPAT_LIBRARY)

IF( NOT EXPAT_FOUND )
  MESSAGE("Expat library not found.")
ENDIF( NOT EXPAT_FOUND )

