#X3D V3.0 utf8

PROFILE Full

#location in front of wall (only one side of box visible, nothing else)
Viewpoint {
  position 0 0 2
  orientation -0.001 0.0 0.0 0.001
  fieldOfView 0.785398
}

DEF PointLight1 PointLight {
   location 0 0 3
   color 1 1 1
}

#DEF PointLight2 PointLight {
#  location 0 0 6
#  color 1 1 1
#}

Transform {
   #scale 4 4 10
   scale  4 4 4
   children Shape {
      appearance Appearance {
      shaders DEF Shader1 PackagedShader {
        exposedField SFVec3f Cc 1 1 0 
        exposedField SFFloat Ka 1 
        exposedField SFFloat Kd 1 
        exposedField SFFloat octaves 8 
        exposedField SFFloat offset 1 
        exposedField SFFloat omega 0.4 
        exposedField SFFloat scale 0.2 
        exposedField SFInt32 shaderCompilerErrorCode 0 
        exposedField SFString shaderCompilerOutput "shaderscript:/home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
Compiling /home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
" 
        exposedField SFString shaderLanguage "RSL" 
        exposedField SFString shaderScript "
#define TWOPI (2*PI)

/* Use signed noise on [-1,1] */
#define snoise(x) ((2*noise(x))-1)

surface
KMVenus (float Ka = 1, Kd = 1;
       float offset = 1;
       float scale = 0.2;
       float twist = 0.22;
       float omega = 0.4;
       float octaves = 8;
	   color Cc = color(1,1,0);)
{
  point Ptexture;           /* the shade point in texture space */
  point PtN;                /* normalized version of Ptexture */
  point PP;                 /* Point after rotation by coriolis twist */
  float rsq;                /* Used in calculation of twist */
  float angle;              /* Twist angle */
  float sine, cosine;       /* sin and cos of angle */
  float l, o, a, i;         /* Loop control for fractal sum */
  float value;              /* Fractal sum is stored here */

  /* Transform to texture coordinates */
  Ptexture = P;//point(xcomp(P)/mscale,ycomp(P)/mscale,zcomp(P)/mscale); //Ptexture = transform (\"shader\", P);

  /* Calculate Coriolis twist, yielding point PP */
  PtN = P;//PtN = normalize (Ptexture);
  rsq = xcomp(PtN)*xcomp(PtN) + ycomp(PtN)*ycomp(PtN);
  angle = twist * TWOPI * rsq - time*0.001;
  sine = sin (angle);
  cosine = cos (angle);
  PP = point (xcomp(Ptexture)*cosine - ycomp(Ptexture)*sine,
	      xcomp(Ptexture)*sine + ycomp(Ptexture)*cosine,
	      zcomp(Ptexture));

  a = snoise (PP);

  value = abs (offset + scale * a);

  /* Shade like matte, but with color scaled by cloud color */
  Oi = 1;
  Ci = Os * (value * Cc);// * (Ka * ambient() +
			 //   Kd * diffuse(faceforward(normalize(N),I)));
}
" 
        exposedField SFBool specialize FALSE 
        exposedField SFBool syncParams TRUE 
        exposedField SFFloat twist 0.22 
        exposedField SFBool vectorize FALSE 
        url "rtfact:AnySL" 
      }
	 material Material { }
      }
      geometry Box {
      }
   }
}

