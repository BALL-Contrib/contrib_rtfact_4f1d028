#VRML V2.0 utf8 

Viewpoint {
  description "" 
  fieldOfView 0.785398 
  jump TRUE 
  orientation 0 0 1 0 
  position 0 0 20 
}
Transform {
  bboxCenter 0 0 0 
  bboxSize -1 -1 -1 
  center 0 0 0 
  rotation 0 0 1 0 
  scale 1 1 1 
  scaleOrientation 0 0 1 0 
  translation -5 0 0 
  children Shape {
    appearance Appearance {
      shaders DEF Shader1 PackagedShader {
        exposedField SFVec3f Cc 1 1 0 
        exposedField SFFloat Ka 1 
        exposedField SFFloat Kd 1 
        exposedField SFFloat octaves 8 
        exposedField SFFloat offset 1 
        exposedField SFFloat omega 0.4 
        exposedField SFFloat scale 0.2 
        exposedField SFInt32 shaderCompilerErrorCode 0 
        exposedField SFString shaderCompilerOutput "shaderscript:/home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
Compiling /home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
" 
        exposedField SFString shaderLanguage "RSL" 
        exposedField SFString shaderScript "/* I took wave's lead and renamed starfield to KMVenus.sl -- tal AT renderman DOT org */

/*
 * venus.sl - surface for a very cloudy planet like Venus.
 *
 *
 * DESCRIPTION:
 *      When put on a sphere, sets the color to look like a densely
 *   clouded planet, very much like the real Venus appears in UV.
 *      The shader works by creating a fractal turbulence function over
 *   the surface to simulate the clouds.  Strong Coriolis forces are
 *   simulated to give the twisting of clouds that is typically seen
 *   on Venus.
 *
 *
 * PARAMETERS:
 *    Ka, Kd - the usual meaning
 *    offset, scale - control the linear scaling of the cloud value.
 *    twist - controls the twisting of the clouds due to Coriolis forces.
 *    omega - controls the fractal characteristics of the clouds
 *    octaves - the number of octaves of noise to sum for the clouds.
 *
 *
 * HINTS:
 *    The default values for the shader assume that the planet is
 *    represented by a unit sphere.  The texture space and/or parameters
 *    to this shader will need to be altered if the size of your planet
 *    is radically different.
 *
 *
 * AUTHOR: Ken Musgrave.
 *    Conversion to Shading Language and minor modifications by Larry Gritz.
 *
 *
 * REFERENCES:
 *    _Texturing and Modeling: A Procedural Approach_, by David S. Ebert, ed.,
 *    F. Kenton Musgrave, Darwyn Peachey, Ken Perlin, and Steven Worley.
 *    Academic Press, 1994.  ISBN 0-12-228760-6.
 *
 *
 * HISTORY:
 *    ???? - Venus texture developed by F. Ken Musgrave.
 *    Feb 1994 - Conversion to Shading Language by L. Gritz
 *
 * last modified 1 March 1994 by lg
 */



#define TWOPI (2*PI)


/* Use signed noise on [-1,1] */
#define snoise(x) ((2*noise(x))-1)



surface
KMVenus (float Ka = 1, Kd = 1;
       float offset = 1;
       float scale = 0.2;
       float twist = 0.22;
       float omega = 0.4;
       float octaves = 8;
	   color Cc = color(1,1,0);)
{
  point Ptexture;           /* the shade point in texture space */
  point PtN;                /* normalized version of Ptexture */
  point PP;                 /* Point after rotation by coriolis twist */
  float rsq;                /* Used in calculation of twist */
  float angle;              /* Twist angle */
  float sine, cosine;       /* sin and cos of angle */
  float l, o, a, i;         /* Loop control for fractal sum */
  float value;              /* Fractal sum is stored here */

  /* Transform to texture coordinates */
  float mscale=10;
  Ptexture = point(xcomp(P)/mscale,ycomp(P)/mscale,zcomp(P)/mscale); //Ptexture = transform (\"shader\", P);

  /* Calculate Coriolis twist, yielding point PP */
  PtN = normalize (Ptexture);
  rsq = xcomp(PtN)*xcomp(PtN) + ycomp(PtN)*ycomp(PtN);
  angle = twist * TWOPI * rsq - time*0.001;
  sine = sin (angle);
  cosine = cos (angle);
  PP = point (xcomp(Ptexture)*cosine - ycomp(Ptexture)*sine,
	      xcomp(Ptexture)*sine + ycomp(Ptexture)*cosine,
	      zcomp(Ptexture));

  /* Compute VLfBm */
  l = 1;  o = 1;  a = 0;
  for (i = 0;  i < octaves;  i += 1) {
      a += o * snoise (PP * l);
      l *= 2;
      o *= omega;
    }

  value = abs (offset + scale * a);

  color c = color( sin(time*0.0005)*0.5+0.5,1,0);
  color cb = color( sin(time*0.0005)*0.5+0.5,0,0);

  /* Shade like matte, but with color scaled by cloud color */
  Oi = 1;
  Ci = Os * (value * c) + cb;// * (Ka * ambient() +
	//		    Kd * diffuse(faceforward(normalize(N),I)));
}
" 
        exposedField SFBool specialize FALSE 
        exposedField SFBool syncParams TRUE 
        exposedField SFFloat twist 0.22 
        exposedField SFBool vectorize FALSE 
        url "rtfact:AnySL" 
      }
    }
    geometry Box {
      size 2 2 2 
    }
  }
}
Transform {
  bboxCenter 0 0 0 
  bboxSize -1 -1 -1 
  center 0 0 0 
  rotation 0 0 1 0 
  scale 1 1 1 
  scaleOrientation 0 0 1 0 
  translation 0 0 0 
  children Shape {
    appearance Appearance {
      shaders DEF Shader2 PackagedShader {
        exposedField SFVec3f Cc 1 1 0 
        exposedField SFFloat Ka 1 
        exposedField SFFloat Kd 1 
        exposedField SFFloat octaves 8 
        exposedField SFFloat offset 1 
        exposedField SFFloat omega 0.4 
        exposedField SFFloat scale 0.2 
        exposedField SFInt32 shaderCompilerErrorCode 0 
        exposedField SFString shaderCompilerOutput "shaderscript:/home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_ZQEge2
Compiling /home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_ZQEge2
" 
        exposedField SFString shaderLanguage "RSL" 
        exposedField SFString shaderScript "/* I took wave's lead and renamed starfield to KMVenus.sl -- tal AT renderman DOT org */

/*
 * venus.sl - surface for a very cloudy planet like Venus.
 *
 *
 * DESCRIPTION:
 *      When put on a sphere, sets the color to look like a densely
 *   clouded planet, very much like the real Venus appears in UV.
 *      The shader works by creating a fractal turbulence function over
 *   the surface to simulate the clouds.  Strong Coriolis forces are
 *   simulated to give the twisting of clouds that is typically seen
 *   on Venus.
 *
 *
 * PARAMETERS:
 *    Ka, Kd - the usual meaning
 *    offset, scale - control the linear scaling of the cloud value.
 *    twist - controls the twisting of the clouds due to Coriolis forces.
 *    omega - controls the fractal characteristics of the clouds
 *    octaves - the number of octaves of noise to sum for the clouds.
 *
 *
 * HINTS:
 *    The default values for the shader assume that the planet is
 *    represented by a unit sphere.  The texture space and/or parameters
 *    to this shader will need to be altered if the size of your planet
 *    is radically different.
 *
 *
 * AUTHOR: Ken Musgrave.
 *    Conversion to Shading Language and minor modifications by Larry Gritz.
 *
 *
 * REFERENCES:
 *    _Texturing and Modeling: A Procedural Approach_, by David S. Ebert, ed.,
 *    F. Kenton Musgrave, Darwyn Peachey, Ken Perlin, and Steven Worley.
 *    Academic Press, 1994.  ISBN 0-12-228760-6.
 *
 *
 * HISTORY:
 *    ???? - Venus texture developed by F. Ken Musgrave.
 *    Feb 1994 - Conversion to Shading Language by L. Gritz
 *
 * last modified 1 March 1994 by lg
 */



#define TWOPI (2*PI)


/* Use signed noise on [-1,1] */
#define snoise(x) ((2*noise(x))-1)



surface
KMVenus (float Ka = 1, Kd = 1;
       float offset = 1;
       float scale = 0.2;
       float twist = 0.22;
       float omega = 0.4;
       float octaves = 8;
	   color Cc = color(1,1,0);)
{
  point Ptexture;           /* the shade point in texture space */
  point PtN;                /* normalized version of Ptexture */
  point PP;                 /* Point after rotation by coriolis twist */
  float rsq;                /* Used in calculation of twist */
  float angle;              /* Twist angle */
  float sine, cosine;       /* sin and cos of angle */
  float l, o, a, i;         /* Loop control for fractal sum */
  float value;              /* Fractal sum is stored here */

  /* Transform to texture coordinates */
  Ptexture = P; //Ptexture = transform (\"shader\", P);

  /* Calculate Coriolis twist, yielding point PP */
  PtN = normalize (Ptexture);
  rsq = xcomp(PtN)*xcomp(PtN) + ycomp(PtN)*ycomp(PtN);
  angle = twist * TWOPI * rsq - time*0.001;
  sine = sin (angle);
  cosine = cos (angle);
  PP = point (xcomp(Ptexture)*cosine - ycomp(Ptexture)*sine,
	      xcomp(Ptexture)*sine + ycomp(Ptexture)*cosine,
	      zcomp(Ptexture));

  /* Compute VLfBm */
  l = 1;  o = 1;  a = 0;
  for (i = 0;  i < octaves;  i += 1) {
      a += o * snoise (PP * l);
      l *= 2;
      o *= omega;
    }

  value = abs (offset + scale * a);

  color c = color( sin(time*0.0005)*0.5+0.5,1,0);
  color cb = color( sin(time*0.0005)*0.5+0.5,0,0);

  /* Shade like matte, but with color scaled by cloud color */
  Oi = 1;
  Ci = Os * (value * c) + cb;// * (Ka * ambient() +
	//		    Kd * diffuse(faceforward(normalize(N),I)));
}
" 
        exposedField SFBool specialize FALSE 
        exposedField SFBool syncParams TRUE 
        exposedField SFFloat twist 0.22 
        exposedField SFBool vectorize FALSE 
        url "rtfact:AnySL" 
      }
    }
    geometry Box {
      size 2 2 2 
    }
  }
}
Transform {
  bboxCenter 0 0 0 
  bboxSize -1 -1 -1 
  center 0 0 0 
  rotation 0 0 1 0 
  scale 1 1 1 
  scaleOrientation 0 0 1 0 
  translation 5 0 0 
  children Shape {
    appearance Appearance {
      shaders DEF Shader3 PackagedShader {
        exposedField SFFloat Ka 0.5 
        exposedField SFFloat Kd 0.75 
        exposedField SFFloat max_radius 1 
        exposedField SFFloat octaves 3.4 
        exposedField SFFloat offset 1.1 
        exposedField SFFloat omega 0.275 
        exposedField SFFloat scale 1.2 
        exposedField SFInt32 shaderCompilerErrorCode 0 
        exposedField SFString shaderCompilerOutput "shaderscript:/home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_BTvGOk
Compiling /home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_BTvGOk
" 
        exposedField SFString shaderLanguage "RSL" 
        exposedField SFString shaderScript "/* I took wave's lead and renamed starfield to KMCyclone.sl -- tal AT renderman DOT org */

/*
 * cyclone.sl - surface for a semi-opaque cloud layer to be put on an
 *              earth-like planetary model to model clouds and a cyclone.
 *
 * DESCRIPTION:
 *      When put on a sphere, sets the color & opacity of the sphere to
 *   make it look like the clouds surrounding an Earth-like planet, with
 *   a big cyclone.
 *      The shader works by creating a fractal turbulence function over
 *   the surface, then modulating the opacity based on this function in
 *   a way that looks like clouds on a planetary scale.
 *
 *
 * PARAMETERS:
 *    Ka, Kd - the usual meaning
 *    cloudcolor - the color of the clouds, usually white
 *    max_radius
 *    twist - controls the twisting of the clouds due to the cyclone.
 *    offset, scale - control the linear scaling of the cloud value.
 *    omega, octaves - controls the fractal characteristics of the clouds
 *
 *
 * HINTS:
 *    See the \"planetclouds\" shader for hints which apply equally well
 *    to this shader.
 *
 *
 * AUTHOR: Ken Musgrave
 *    Conversion to Shading Language and other minor changes by Larry Gritz.
 *
 * REFERENCES:
 *    _Texturing and Modeling: A Procedural Approach_, by David S. Ebert, ed.,
 *    F. Kenton Musgrave, Darwyn Peachey, Ken Perlin, and Steven Worley.
 *    Academic Press, 1994.  ISBN 0-12-228760-6.
 *
 * HISTORY:
 *    ???? - original texture developed by Ken Musgrave.
 *    Feb 1994 - Conversion to Shading Language by L. Gritz
 *
 * last modified 1 March 1994 by lg
 */



#define TWOPI (2*PI)

/* Use signed Perlin noise */
#define snoise(x) ((2*noise(x))-1)
#define DNoise(p) (2*(point noise(p)) - point(1,1,1))
#define VLNoise(Pt,scale) (snoise(DNoise(Pt)+(scale*Pt)))
#define VERY_SMALL 0.001




surface
KMCyclone (float Ka = 0.5, Kd = 0.75;
	 float max_radius = 1;
	 float twist = -1.5;
	 float scale = 1.2, offset = 1.1;
	 float omega = 0.275;
	 float octaves = 3.4;)
{
  float radius, dist, angle, sine, cosine, eye_weight, value;
  point Pt;                 /* Point in texture space */
  point PN;                 /* Normalized vector in texture space */
  point PP;                 /* Point after distortion */
  float l, o, a, i;         /* Loop control for fractal sum */

  /* Transform to texture coordinates */
  float mscale=10;
  Pt = point(xcomp(P)/mscale,ycomp(P)/mscale,zcomp(P)/mscale); //Pt = transform (\"shader\", P);

  /* Rotate hit point to \"cyclone space\" */
  PN = normalize (Pt);
  radius = sqrt (xcomp(PN)*xcomp(PN) + ycomp(PN)*ycomp(PN));

  if (radius < max_radius) {   /* inside of cyclone */
      /* invert distance from center */
      dist = pow (max_radius - radius, 3);
      angle = PI + twist * TWOPI * (max_radius-dist) / max_radius -time*0.001;
      sine = sin (angle);
      cosine = cos (angle);
      PP = point (xcomp(Pt)*cosine - ycomp(Pt)*sine,
		  xcomp(Pt)*sine + ycomp(Pt)*cosine,
		  zcomp(Pt));
      /* Subtract out \"eye\" of storm */
      if (radius < 0.05*max_radius) {  /* if in \"eye\" */
	  eye_weight = (.1*max_radius - radius) * 10;   /* normalize */
	  /* invert and make nonlinear */
	  eye_weight = pow (1 - eye_weight, 4);
	}
      else eye_weight = 1;
    }
  else PP = Pt;

  if (eye_weight > 0) {   /* if in \"storm\" area */
      /* Compute VLfBm */
      l = 1;  o = 1;  a = 0;
      for (i = 0;  i < octaves  &&  o >= VERY_SMALL;  i += 1) {
	  a += o * VLNoise (PP * l, 1);
	  l *= 2;
	  o *= omega;
	}
      value = abs (eye_weight * (offset + scale * a));
    }
  else value = 0;

  /* Thin the density of the clouds */
  //Oi = value * Os;

  /* Shade like matte, but with color scaled by cloud opacity */
  Ci =value;
}

" 
        exposedField SFBool specialize FALSE 
        exposedField SFBool syncParams TRUE 
        exposedField SFFloat twist -1.5 
        exposedField SFBool vectorize FALSE 
        url "rtfact:AnySL" 
      }
    }
    geometry Box {
      size 2 2 2 
    }
  }
}
Transform {
  bboxCenter 0 0 0 
  bboxSize -1 -1 -1 
  center 0 0 0 
  rotation 0 0 1 0 
  scale 1 1 1 
  scaleOrientation 0 0 1 0 
  translation 10 0 0 
  children Shape {
    appearance Appearance {
      shaders DEF Shader4 PackagedShader {
        exposedField SFFloat Ka 0.5 
        exposedField SFFloat Kd 0.75 
        exposedField SFFloat max_radius 1 
        exposedField SFFloat octaves 3.4 
        exposedField SFFloat offset 1.1 
        exposedField SFFloat omega 0.275 
        exposedField SFFloat scale 1.2 
        exposedField SFInt32 shaderCompilerErrorCode 0 
        exposedField SFString shaderCompilerOutput "shaderscript:/home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_BTvGOk
Compiling /home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_BTvGOk
" 
        exposedField SFString shaderLanguage "RSL" 
        exposedField SFString shaderScript "/* I took wave's lead and renamed starfield to KMCyclone.sl -- tal AT renderman DOT org */

/*
 * cyclone.sl - surface for a semi-opaque cloud layer to be put on an
 *              earth-like planetary model to model clouds and a cyclone.
 *
 * DESCRIPTION:
 *      When put on a sphere, sets the color & opacity of the sphere to
 *   make it look like the clouds surrounding an Earth-like planet, with
 *   a big cyclone.
 *      The shader works by creating a fractal turbulence function over
 *   the surface, then modulating the opacity based on this function in
 *   a way that looks like clouds on a planetary scale.
 *
 *
 * PARAMETERS:
 *    Ka, Kd - the usual meaning
 *    cloudcolor - the color of the clouds, usually white
 *    max_radius
 *    twist - controls the twisting of the clouds due to the cyclone.
 *    offset, scale - control the linear scaling of the cloud value.
 *    omega, octaves - controls the fractal characteristics of the clouds
 *
 *
 * HINTS:
 *    See the \"planetclouds\" shader for hints which apply equally well
 *    to this shader.
 *
 *
 * AUTHOR: Ken Musgrave
 *    Conversion to Shading Language and other minor changes by Larry Gritz.
 *
 * REFERENCES:
 *    _Texturing and Modeling: A Procedural Approach_, by David S. Ebert, ed.,
 *    F. Kenton Musgrave, Darwyn Peachey, Ken Perlin, and Steven Worley.
 *    Academic Press, 1994.  ISBN 0-12-228760-6.
 *
 * HISTORY:
 *    ???? - original texture developed by Ken Musgrave.
 *    Feb 1994 - Conversion to Shading Language by L. Gritz
 *
 * last modified 1 March 1994 by lg
 */



#define TWOPI (2*PI)

/* Use signed Perlin noise */
#define snoise(x) ((2*noise(x))-1)
#define DNoise(p) (2*(point noise(p)) - point(1,1,1))
#define VLNoise(Pt,scale) (snoise(DNoise(Pt)+(scale*Pt)))
#define VERY_SMALL 0.001




surface
KMCyclone (float Ka = 0.5, Kd = 0.75;
	 float max_radius = 1;
	 float twist = -1.5;
	 float scale = 1.2, offset = 1.1;
	 float omega = 0.275;
	 float octaves = 3.4;)
{
  float radius, dist, angle, sine, cosine, eye_weight, value;
  point Pt;                 /* Point in texture space */
  point PN;                 /* Normalized vector in texture space */
  point PP;                 /* Point after distortion */
  float l, o, a, i;         /* Loop control for fractal sum */

  /* Transform to texture coordinates */
  float mscale=10;
  Pt = point(xcomp(P)/mscale,ycomp(P)/mscale,zcomp(P)/mscale); //Pt = transform (\"shader\", P);

  /* Rotate hit point to \"cyclone space\" */
  PN = normalize (Pt);
  radius = sqrt (xcomp(PN)*xcomp(PN) + ycomp(PN)*ycomp(PN));

  if (radius < max_radius) {   /* inside of cyclone */
      /* invert distance from center */
      dist = pow (max_radius - radius, 3);
      angle = PI + twist * TWOPI * (max_radius-dist) / max_radius -time*0.001;
      sine = sin (angle);
      cosine = cos (angle);
      PP = point (xcomp(Pt)*cosine - ycomp(Pt)*sine,
		  xcomp(Pt)*sine + ycomp(Pt)*cosine,
		  zcomp(Pt));
      /* Subtract out \"eye\" of storm */
      if (radius < 0.05*max_radius) {  /* if in \"eye\" */
	  eye_weight = (.1*max_radius - radius) * 10;   /* normalize */
	  /* invert and make nonlinear */
	  eye_weight = pow (1 - eye_weight, 4);
	}
      else eye_weight = 1;
    }
  else PP = Pt;

  if (eye_weight > 0) {   /* if in \"storm\" area */
      /* Compute VLfBm */
      l = 1;  o = 1;  a = 0;
      for (i = 0;  i < octaves  &&  o >= VERY_SMALL;  i += 1) {
	  a += o * VLNoise (PP * l, 1);
	  l *= 2;
	  o *= omega;
	}
      value = abs (eye_weight * (offset + scale * a));
    }
  else value = 0;

  /* Thin the density of the clouds */
  //Oi = value * Os;

  /* Shade like matte, but with color scaled by cloud opacity */
  Ci =value;
}

" 
        exposedField SFBool specialize FALSE 
        exposedField SFBool syncParams TRUE 
        exposedField SFFloat twist -1.5 
        exposedField SFBool vectorize FALSE 
        url "rtfact:AnySL" 
      }
    }
    geometry Box {
      size 2 2 2 
    }
  }
}
PointLight {
  ambientIntensity 0 
  attenuation 1 0 0 
  color 1 1 1 
  intensity 1 
  location 0 0 20 
  on TRUE 
  radius 100 
}
