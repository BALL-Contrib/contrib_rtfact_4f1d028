#VRML V2.0 utf8 

Viewpoint {
  description "" 
  fieldOfView 0.785398 
  jump TRUE 
  orientation 0 0 1 0 
  position 0 0 20 
}
Transform {
  bboxCenter 0 0 0 
  bboxSize -1 -1 -1 
  center 0 0 0 
  rotation 0 0 1 0 
  scale 1 1 1 
  scaleOrientation 0 0 1 0 
  translation -5 0 0 
  children Shape {
    appearance Appearance {
      shaders DEF Shader1 PackagedShader {
        exposedField SFFloat Ka 1 
        exposedField SFFloat Kd 0.75 
        exposedField SFFloat Ks 0.15 
        exposedField SFFloat roughness 0.025 
        exposedField SFFloat ringscale 15 
        exposedField SFFloat grainscale 60 
        exposedField SFFloat txtscale 1
        exposedField SFFloat plankspertile 2
        exposedField SFColor specularcolor 1 1 1
        exposedField SFColor lightwood 0.57 0.292 0.125
        exposedField SFColor darkwood 0.275 0.15 0.06
        exposedField SFColor groovecolor 0.05 0.04 0.015
        exposedField SFFloat plankwidth 0.05
        exposedField SFFloat groovewidth 0.001
        exposedField SFFloat plankvary 0.8
        exposedField SFFloat grainy 1
        exposedField SFFloat wavy 0.08
        exposedField SFInt32 shaderCompilerErrorCode 0 
        exposedField SFString shaderCompilerOutput "shaderscript:/home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
Compiling /home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
" 
        exposedField SFString shaderLanguage "RSL" 
        exposedField SFString shaderScript "
surface
parquet_plank (float Ka = 1, Kd = 0.75, Ks = .15, roughness = .025;
       color specularcolor = 1;
       float ringscale = 15, grainscale = 60;
       float txtscale = 1;
       float plankspertile = 4;
       color lightwood = color (0.57, 0.292, 0.125);
       color darkwood  = color (0.275, 0.15, 0.06);
       color groovecolor  = color (.05, .04, .015);
       float plankwidth = .05, groovewidth = 0.001;
       float plankvary = 0.8;
       float grainy = 1, wavy = 0.08; )
{
#define snoise(x) (2 * noise((x)) - 1)
#define boxstep(a,b,x) (clamp(((x)-(a))/((b)-(a)),0,1))
#define MINFILTERWIDTH 1.0e-7

  float r, r2;
  point Nf;
  float whichrow, whichplank;
  float swidth, twidth, fwidth, ss, tt, w, h, fade, ttt;
  color Ct, woodcolor;
  float groovy;
  float PGWIDTH, PGHEIGHT, GWF, GHF;
  float tilewidth, whichtile, tmp, planklength;

  PGWIDTH = plankwidth+groovewidth;
  planklength = PGWIDTH * plankspertile - groovewidth;
  PGHEIGHT = planklength+groovewidth;
  GWF = groovewidth*0.5/PGWIDTH;
  GHF = groovewidth*0.5/PGHEIGHT;

  /* Determine how wide in s-t space one pixel projects to */
  swidth = (max (abs(Du(s)*du) + abs(Dv(s)*dv), MINFILTERWIDTH) /
PGWIDTH) * txtscale;
  twidth = (max (abs(Du(t)*du) + abs(Dv(t)*dv), MINFILTERWIDTH) /
PGHEIGHT) * txtscale;
  fwidth = max(swidth,twidth);

  Nf = faceforward (normalize(N),I);

  ss = (txtscale * s) / PGWIDTH;
  whichrow = floor (ss);
  tt = (txtscale * t) / PGHEIGHT;
  whichplank = floor(tt);
  if (mod (whichrow/plankspertile + whichplank, 2) >= 1) {
      ss = txtscale * t / PGWIDTH;
      whichrow = floor (ss);
      tt = txtscale * s / PGHEIGHT;
      whichplank = floor(tt);
      //tmp = swidth;  swidth = twidth;  twidth = tmp;
    } 
  ss -= whichrow;
  tt -= whichplank;
  whichplank += 20*(whichrow+10);

  /*
   * Figure out where the grooves are.  The value groovy is 0 during
   * are grooves, 1 where the wood grain is visible.  Do some simple
   * antialiasing.
   */
  if (swidth >= 1)
      w = 1 - 2*GWF;
  else w = clamp (boxstep(GWF-swidth,GWF,ss), max(1-GWF/swidth,0), 1)
 - clamp (boxstep(1-GWF-swidth,1-GWF,ss), 0, 2*GWF/swidth);
  if (twidth >= 1)
      h = 1 - 2*GHF;
  else h = clamp (boxstep(GHF-twidth,GHF,tt), max(1-GHF/twidth,0),1)
 - clamp (boxstep(1-GHF-twidth,1-GHF,tt), 0, 2*GHF/twidth);
  
  //This would be the non-antialiased version:
  //w = step (GWF,ss) - step(1-GWF,ss);
  //h = step (GHF,tt) - step(1-GHF,tt);
  
  groovy = w*h;


  /*
   * Add the ring patterns
   */
  fade = smoothstep (1/ringscale, 8/ringscale, fwidth);
  if (fade < 0.999) {
      ttt = tt/4+whichplank/28.38 + wavy * noise (8*ss, tt/4);
      r = ringscale * noise (ss-whichplank, ttt);
      r -= floor (r);
      r = 0.3+0.7*smoothstep(0.2,0.55,r)*(1-smoothstep(0.75,0.8, r));
      r = (1-fade)*r + 0.65*fade;

      /*
       * Multiply the ring pattern by the fine grain
       */
      fade = smoothstep (2/grainscale, 8/grainscale, fwidth);
      if (fade < 0.999) {
	 r2 = 1.3 - noise (ss*grainscale, (tt*grainscale/4));
	 r2 = grainy * r2*r2 + (1-grainy);
	 r *= (1-fade)*r2 + (0.75*fade);
	}
      else r *= 0.75;
    }
  else r = 0.4875;
  

  /* Mix the light and dark wood according to the grain pattern */
  woodcolor = mix (lightwood, darkwood, r);

  /* Add plank-to-plank variation in overall color */
  woodcolor *= (1-plankvary/2 + plankvary * noise (whichplank+0.5));

  Ct = mix (groovecolor, woodcolor, groovy);

  /* Use the plastic illumination model */
  Oi = Os;
  Ci = Os * ( Ct * (Ka*ambient() + Kd*diffuse(Nf)) +
      specularcolor * Ks*specular(Nf,-normalize(I),roughness));
}
" 
        exposedField SFBool specialize FALSE 
        exposedField SFBool syncParams TRUE 
        exposedField SFBool packetize FALSE 
        url "rtfact:AnySL" 
      }
    }
    geometry Box {
      size 2 2 2 
    }
  }
}
Transform {
  bboxCenter 0 0 0 
  bboxSize -1 -1 -1 
  center 0 0 0 
  rotation 0 0 1 0 
  scale 1 1 1 
  scaleOrientation 0 0 1 0 
  translation 0 0 0 
  children Shape {
    appearance Appearance {
      shaders DEF Shader2 PackagedShader {
        exposedField SFFloat Ka 1 
        exposedField SFFloat Kd 0.75 
        exposedField SFFloat Ks 0.15 
        exposedField SFFloat roughness 0.025 
        exposedField SFFloat ringscale 15 
        exposedField SFFloat grainscale 60 
        exposedField SFFloat txtscale 1
        exposedField SFFloat plankspertile 3
        exposedField SFColor specularcolor 1 1 1
        exposedField SFColor lightwood 0.57 0.292 0.125
        exposedField SFColor darkwood 0.275 0.15 0.06
        exposedField SFColor groovecolor 0.05 0.04 0.015
        exposedField SFFloat plankwidth 0.05
        exposedField SFFloat groovewidth 0.001
        exposedField SFFloat plankvary 0.8
        exposedField SFFloat grainy 1
        exposedField SFFloat wavy 0.08
        exposedField SFInt32 shaderCompilerErrorCode 0 
        exposedField SFString shaderCompilerOutput "shaderscript:/home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
Compiling /home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
" 
        exposedField SFString shaderLanguage "RSL" 
        exposedField SFString shaderScript "
surface
parquet_plank (float Ka = 1, Kd = 0.75, Ks = .15, roughness = .025;
       color specularcolor = 1;
       float ringscale = 15, grainscale = 60;
       float txtscale = 1;
       float plankspertile = 4;
       color lightwood = color (0.57, 0.292, 0.125);
       color darkwood  = color (0.275, 0.15, 0.06);
       color groovecolor  = color (.05, .04, .015);
       float plankwidth = .05, groovewidth = 0.001;
       float plankvary = 0.8;
       float grainy = 1, wavy = 0.08; )
{
#define snoise(x) (2 * noise((x)) - 1)
#define boxstep(a,b,x) (clamp(((x)-(a))/((b)-(a)),0,1))
#define MINFILTERWIDTH 1.0e-7

  float r, r2;
  point Nf;
  float whichrow, whichplank;
  float swidth, twidth, fwidth, ss, tt, w, h, fade, ttt;
  color Ct, woodcolor;
  float groovy;
  float PGWIDTH, PGHEIGHT, GWF, GHF;
  float tilewidth, whichtile, tmp, planklength;

  PGWIDTH = plankwidth+groovewidth;
  planklength = PGWIDTH * plankspertile - groovewidth;
  PGHEIGHT = planklength+groovewidth;
  GWF = groovewidth*0.5/PGWIDTH;
  GHF = groovewidth*0.5/PGHEIGHT;

  /* Determine how wide in s-t space one pixel projects to */
  swidth = (max (abs(Du(s)*du) + abs(Dv(s)*dv), MINFILTERWIDTH) /
PGWIDTH) * txtscale;
  twidth = (max (abs(Du(t)*du) + abs(Dv(t)*dv), MINFILTERWIDTH) /
PGHEIGHT) * txtscale;
  fwidth = max(swidth,twidth);

  Nf = faceforward (normalize(N),I);

  ss = (txtscale * s) / PGWIDTH;
  whichrow = floor (ss);
  tt = (txtscale * t) / PGHEIGHT;
  whichplank = floor(tt);
  if (mod (whichrow/plankspertile + whichplank, 2) >= 1) {
      ss = txtscale * t / PGWIDTH;
      whichrow = floor (ss);
      tt = txtscale * s / PGHEIGHT;
      whichplank = floor(tt);
      //tmp = swidth;  swidth = twidth;  twidth = tmp;
    } 
  ss -= whichrow;
  tt -= whichplank;
  whichplank += 20*(whichrow+10);

  /*
   * Figure out where the grooves are.  The value groovy is 0 during
   * are grooves, 1 where the wood grain is visible.  Do some simple
   * antialiasing.
   */
  if (swidth >= 1)
      w = 1 - 2*GWF;
  else w = clamp (boxstep(GWF-swidth,GWF,ss), max(1-GWF/swidth,0), 1)
 - clamp (boxstep(1-GWF-swidth,1-GWF,ss), 0, 2*GWF/swidth);
  if (twidth >= 1)
      h = 1 - 2*GHF;
  else h = clamp (boxstep(GHF-twidth,GHF,tt), max(1-GHF/twidth,0),1)
 - clamp (boxstep(1-GHF-twidth,1-GHF,tt), 0, 2*GHF/twidth);
  
  //This would be the non-antialiased version:
  //w = step (GWF,ss) - step(1-GWF,ss);
  //h = step (GHF,tt) - step(1-GHF,tt);
  
  groovy = w*h;


  /*
   * Add the ring patterns
   */
  fade = smoothstep (1/ringscale, 8/ringscale, fwidth);
  if (fade < 0.999) {
      ttt = tt/4+whichplank/28.38 + wavy * noise (8*ss, tt/4);
      r = ringscale * noise (ss-whichplank, ttt);
      r -= floor (r);
      r = 0.3+0.7*smoothstep(0.2,0.55,r)*(1-smoothstep(0.75,0.8, r));
      r = (1-fade)*r + 0.65*fade;

      /*
       * Multiply the ring pattern by the fine grain
       */
      fade = smoothstep (2/grainscale, 8/grainscale, fwidth);
      if (fade < 0.999) {
	 r2 = 1.3 - noise (ss*grainscale, (tt*grainscale/4));
	 r2 = grainy * r2*r2 + (1-grainy);
	 r *= (1-fade)*r2 + (0.75*fade);
	}
      else r *= 0.75;
    }
  else r = 0.4875;
  

  /* Mix the light and dark wood according to the grain pattern */
  woodcolor = mix (lightwood, darkwood, r);

  /* Add plank-to-plank variation in overall color */
  woodcolor *= (1-plankvary/2 + plankvary * noise (whichplank+0.5));

  Ct = mix (groovecolor, woodcolor, groovy);

  /* Use the plastic illumination model */
  Oi = Os;
  Ci = Os * ( Ct * (Ka*ambient() + Kd*diffuse(Nf)) +
      specularcolor * Ks*specular(Nf,-normalize(I),roughness));
}
" 
        exposedField SFBool specialize FALSE 
        exposedField SFBool syncParams TRUE 
        exposedField SFBool packetize FALSE 
        url "rtfact:AnySL" 
      }
    }
    geometry Box {
      size 2 2 2 
    }
  }
}
Transform {
  bboxCenter 0 0 0 
  bboxSize -1 -1 -1 
  center 0 0 0 
  rotation 0 0 1 0 
  scale 1 1 1 
  scaleOrientation 0 0 1 0 
  translation 5 0 0 
  children Shape {
    appearance Appearance {
      shaders DEF Shader3 PackagedShader {
        exposedField SFFloat Ka 1 
        exposedField SFFloat Kd 0.75 
        exposedField SFFloat Ks 0.15 
        exposedField SFFloat roughness 0.025 
        exposedField SFFloat ringscale 15 
        exposedField SFFloat grainscale 60 
        exposedField SFFloat txtscale 1
        exposedField SFFloat plankspertile 4
        exposedField SFColor specularcolor 1 1 1
        exposedField SFColor lightwood 0.57 0.292 0.125
        exposedField SFColor darkwood 0.275 0.15 0.06
        exposedField SFColor groovecolor 0.05 0.04 0.015
        exposedField SFFloat plankwidth 0.05
        exposedField SFFloat groovewidth 0.001
        exposedField SFFloat plankvary 0.8
        exposedField SFFloat grainy 1
        exposedField SFFloat wavy 0.08
        exposedField SFInt32 shaderCompilerErrorCode 0 
        exposedField SFString shaderCompilerOutput "shaderscript:/home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
Compiling /home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
" 
        exposedField SFString shaderLanguage "RSL" 
        exposedField SFString shaderScript "
surface
parquet_plank (float Ka = 1, Kd = 0.75, Ks = .15, roughness = .025;
       color specularcolor = 1;
       float ringscale = 15, grainscale = 60;
       float txtscale = 1;
       float plankspertile = 4;
       color lightwood = color (0.57, 0.292, 0.125);
       color darkwood  = color (0.275, 0.15, 0.06);
       color groovecolor  = color (.05, .04, .015);
       float plankwidth = .05, groovewidth = 0.001;
       float plankvary = 0.8;
       float grainy = 1, wavy = 0.08; )
{
#define snoise(x) (2 * noise((x)) - 1)
#define boxstep(a,b,x) (clamp(((x)-(a))/((b)-(a)),0,1))
#define MINFILTERWIDTH 1.0e-7

  float r, r2;
  point Nf;
  float whichrow, whichplank;
  float swidth, twidth, fwidth, ss, tt, w, h, fade, ttt;
  color Ct, woodcolor;
  float groovy;
  float PGWIDTH, PGHEIGHT, GWF, GHF;
  float tilewidth, whichtile, tmp, planklength;

  PGWIDTH = plankwidth+groovewidth;
  planklength = PGWIDTH * plankspertile - groovewidth;
  PGHEIGHT = planklength+groovewidth;
  GWF = groovewidth*0.5/PGWIDTH;
  GHF = groovewidth*0.5/PGHEIGHT;

  /* Determine how wide in s-t space one pixel projects to */
  swidth = (max (abs(Du(s)*du) + abs(Dv(s)*dv), MINFILTERWIDTH) /
PGWIDTH) * txtscale;
  twidth = (max (abs(Du(t)*du) + abs(Dv(t)*dv), MINFILTERWIDTH) /
PGHEIGHT) * txtscale;
  fwidth = max(swidth,twidth);

  Nf = faceforward (normalize(N),I);

  ss = (txtscale * s) / PGWIDTH;
  whichrow = floor (ss);
  tt = (txtscale * t) / PGHEIGHT;
  whichplank = floor(tt);
  if (mod (whichrow/plankspertile + whichplank, 2) >= 1) {
      ss = txtscale * t / PGWIDTH;
      whichrow = floor (ss);
      tt = txtscale * s / PGHEIGHT;
      whichplank = floor(tt);
      //tmp = swidth;  swidth = twidth;  twidth = tmp;
    } 
  ss -= whichrow;
  tt -= whichplank;
  whichplank += 20*(whichrow+10);

  /*
   * Figure out where the grooves are.  The value groovy is 0 during
   * are grooves, 1 where the wood grain is visible.  Do some simple
   * antialiasing.
   */
  if (swidth >= 1)
      w = 1 - 2*GWF;
  else w = clamp (boxstep(GWF-swidth,GWF,ss), max(1-GWF/swidth,0), 1)
 - clamp (boxstep(1-GWF-swidth,1-GWF,ss), 0, 2*GWF/swidth);
  if (twidth >= 1)
      h = 1 - 2*GHF;
  else h = clamp (boxstep(GHF-twidth,GHF,tt), max(1-GHF/twidth,0),1)
 - clamp (boxstep(1-GHF-twidth,1-GHF,tt), 0, 2*GHF/twidth);
  
  //This would be the non-antialiased version:
  //w = step (GWF,ss) - step(1-GWF,ss);
  //h = step (GHF,tt) - step(1-GHF,tt);
  
  groovy = w*h;


  /*
   * Add the ring patterns
   */
  fade = smoothstep (1/ringscale, 8/ringscale, fwidth);
  if (fade < 0.999) {
      ttt = tt/4+whichplank/28.38 + wavy * noise (8*ss, tt/4);
      r = ringscale * noise (ss-whichplank, ttt);
      r -= floor (r);
      r = 0.3+0.7*smoothstep(0.2,0.55,r)*(1-smoothstep(0.75,0.8, r));
      r = (1-fade)*r + 0.65*fade;

      /*
       * Multiply the ring pattern by the fine grain
       */
      fade = smoothstep (2/grainscale, 8/grainscale, fwidth);
      if (fade < 0.999) {
	 r2 = 1.3 - noise (ss*grainscale, (tt*grainscale/4));
	 r2 = grainy * r2*r2 + (1-grainy);
	 r *= (1-fade)*r2 + (0.75*fade);
	}
      else r *= 0.75;
    }
  else r = 0.4875;
  

  /* Mix the light and dark wood according to the grain pattern */
  woodcolor = mix (lightwood, darkwood, r);

  /* Add plank-to-plank variation in overall color */
  woodcolor *= (1-plankvary/2 + plankvary * noise (whichplank+0.5));

  Ct = mix (groovecolor, woodcolor, groovy);

  /* Use the plastic illumination model */
  Oi = Os;
  Ci = Os * ( Ct * (Ka*ambient() + Kd*diffuse(Nf)) +
      specularcolor * Ks*specular(Nf,-normalize(I),roughness));
}
" 
        exposedField SFBool specialize FALSE 
        exposedField SFBool syncParams TRUE 
        exposedField SFBool packetize FALSE 
        url "rtfact:AnySL" 
      }
    }
    geometry Box {
      size 2 2 2 
    }
  }
}
Transform {
  bboxCenter 0 0 0 
  bboxSize -1 -1 -1 
  center 0 0 0 
  rotation 0 0 1 0 
  scale 1 1 1 
  scaleOrientation 0 0 1 0 
  translation 10 0 0 
  children Shape {
    appearance Appearance {
      shaders DEF Shader4 PackagedShader {
        exposedField SFFloat Ka 1 
        exposedField SFFloat Kd 0.75 
        exposedField SFFloat Ks 0.15 
        exposedField SFFloat roughness 0.025 
        exposedField SFFloat ringscale 15 
        exposedField SFFloat grainscale 60 
        exposedField SFFloat txtscale 1
        exposedField SFFloat plankspertile 5
        exposedField SFColor specularcolor 1 1 1
        exposedField SFColor lightwood 0.57 0.292 0.125
        exposedField SFColor darkwood 0.275 0.15 0.06
        exposedField SFColor groovecolor 0.05 0.04 0.015
        exposedField SFFloat plankwidth 0.05
        exposedField SFFloat groovewidth 0.001
        exposedField SFFloat plankvary 0.8
        exposedField SFFloat grainy 1
        exposedField SFFloat wavy 0.08
        exposedField SFInt32 shaderCompilerErrorCode 0 
        exposedField SFString shaderCompilerOutput "shaderscript:/home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
Compiling /home/rubinste/proj_rtsg2/rtfact-anysl/shaders/tmp/rslshader_nSugrW
" 
        exposedField SFString shaderLanguage "RSL" 
        exposedField SFString shaderScript "
surface
parquet_plank (float Ka = 1, Kd = 0.75, Ks = .15, roughness = .025;
       color specularcolor = 1;
       float ringscale = 15, grainscale = 60;
       float txtscale = 1;
       float plankspertile = 4;
       color lightwood = color (0.57, 0.292, 0.125);
       color darkwood  = color (0.275, 0.15, 0.06);
       color groovecolor  = color (.05, .04, .015);
       float plankwidth = .05, groovewidth = 0.001;
       float plankvary = 0.8;
       float grainy = 1, wavy = 0.08; )
{
#define snoise(x) (2 * noise((x)) - 1)
#define boxstep(a,b,x) (clamp(((x)-(a))/((b)-(a)),0,1))
#define MINFILTERWIDTH 1.0e-7

  float r, r2;
  point Nf;
  float whichrow, whichplank;
  float swidth, twidth, fwidth, ss, tt, w, h, fade, ttt;
  color Ct, woodcolor;
  float groovy;
  float PGWIDTH, PGHEIGHT, GWF, GHF;
  float tilewidth, whichtile, tmp, planklength;

  PGWIDTH = plankwidth+groovewidth;
  planklength = PGWIDTH * plankspertile - groovewidth;
  PGHEIGHT = planklength+groovewidth;
  GWF = groovewidth*0.5/PGWIDTH;
  GHF = groovewidth*0.5/PGHEIGHT;

  /* Determine how wide in s-t space one pixel projects to */
  swidth = (max (abs(Du(s)*du) + abs(Dv(s)*dv), MINFILTERWIDTH) /
PGWIDTH) * txtscale;
  twidth = (max (abs(Du(t)*du) + abs(Dv(t)*dv), MINFILTERWIDTH) /
PGHEIGHT) * txtscale;
  fwidth = max(swidth,twidth);

  Nf = faceforward (normalize(N),I);

  ss = (txtscale * s) / PGWIDTH;
  whichrow = floor (ss);
  tt = (txtscale * t) / PGHEIGHT;
  whichplank = floor(tt);
  if (mod (whichrow/plankspertile + whichplank, 2) >= 1) {
      ss = txtscale * t / PGWIDTH;
      whichrow = floor (ss);
      tt = txtscale * s / PGHEIGHT;
      whichplank = floor(tt);
      //tmp = swidth;  swidth = twidth;  twidth = tmp;
    } 
  ss -= whichrow;
  tt -= whichplank;
  whichplank += 20*(whichrow+10);

  /*
   * Figure out where the grooves are.  The value groovy is 0 during
   * are grooves, 1 where the wood grain is visible.  Do some simple
   * antialiasing.
   */
  if (swidth >= 1)
      w = 1 - 2*GWF;
  else w = clamp (boxstep(GWF-swidth,GWF,ss), max(1-GWF/swidth,0), 1)
 - clamp (boxstep(1-GWF-swidth,1-GWF,ss), 0, 2*GWF/swidth);
  if (twidth >= 1)
      h = 1 - 2*GHF;
  else h = clamp (boxstep(GHF-twidth,GHF,tt), max(1-GHF/twidth,0),1)
 - clamp (boxstep(1-GHF-twidth,1-GHF,tt), 0, 2*GHF/twidth);
  
  //This would be the non-antialiased version:
  //w = step (GWF,ss) - step(1-GWF,ss);
  //h = step (GHF,tt) - step(1-GHF,tt);
  
  groovy = w*h;


  /*
   * Add the ring patterns
   */
  fade = smoothstep (1/ringscale, 8/ringscale, fwidth);
  if (fade < 0.999) {
      ttt = tt/4+whichplank/28.38 + wavy * noise (8*ss, tt/4);
      r = ringscale * noise (ss-whichplank, ttt);
      r -= floor (r);
      r = 0.3+0.7*smoothstep(0.2,0.55,r)*(1-smoothstep(0.75,0.8, r));
      r = (1-fade)*r + 0.65*fade;

      /*
       * Multiply the ring pattern by the fine grain
       */
      fade = smoothstep (2/grainscale, 8/grainscale, fwidth);
      if (fade < 0.999) {
	 r2 = 1.3 - noise (ss*grainscale, (tt*grainscale/4));
	 r2 = grainy * r2*r2 + (1-grainy);
	 r *= (1-fade)*r2 + (0.75*fade);
	}
      else r *= 0.75;
    }
  else r = 0.4875;
  

  /* Mix the light and dark wood according to the grain pattern */
  woodcolor = mix (lightwood, darkwood, r);

  /* Add plank-to-plank variation in overall color */
  woodcolor *= (1-plankvary/2 + plankvary * noise (whichplank+0.5));

  Ct = mix (groovecolor, woodcolor, groovy);

  /* Use the plastic illumination model */
  Oi = Os;
  Ci = Os * ( Ct * (Ka*ambient() + Kd*diffuse(Nf)) +
      specularcolor * Ks*specular(Nf,-normalize(I),roughness));
}
" 
        exposedField SFBool specialize FALSE 
        exposedField SFBool syncParams TRUE 
        exposedField SFBool packetize FALSE 
        url "rtfact:AnySL" 
      }
    }
    geometry Box {
      size 2 2 2 
    }
  }
}
PointLight {
  ambientIntensity 0 
  attenuation 1 0 0 
  color 1 1 1 
  intensity 1 
  location 0 0 20 
  on TRUE 
  radius 100 
}
